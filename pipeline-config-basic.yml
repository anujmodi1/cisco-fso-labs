jobs:
- name: lab-prep
  plan:
  - get: lpass-res
    trigger: true
    version: every
  - config:
      image_resource:
        name: ""
        source:
          repository: alpine
        type: docker-image
      inputs:
      - name: lpass-res
      outputs:
      - name: lpass-out
      platform: linux
      run:
        args:
        - -cx
        - |
          cat "lpass-res/item"
          cp "lpass-res/item" "lpass-out/item.json"
          cat "lpass-out/item.json"
        path: /bin/sh
    task: print-item
  - get: git-resource
  - config:
      image_resource:
        name: ""
        source:
          repository: sconrod/python-aws
          tag: v2
        type: docker-image
      inputs:
      - name: git-resource
      - name: lpass-out
      outputs:
      - name: gen-aws-cred
      platform: linux
      run:
        args:
        - -cx
        - |
          ls -la
          cp "lpass-out/item.json" "gen-aws-cred/item.json"
          cp "git-resource/gen-cred.py" "gen-aws-cred/gen-cred.py"
          cd gen-aws-cred
          ls -la
          python3 gen-cred.py #The next task will use this tasks outputs as inputs
        path: /bin/sh
    task: gen-lastpass-cred
  - config:
      image_resource:
        name: ""
        source:
          repository: sconrod/python-aws
          tag: v2
        type: docker-image
      inputs:
      - name: git-resource
      - name: gen-aws-cred
      outputs:
      - name: aws-cred
      platform: linux
      run:
        args:
        - -cx
        - |
          mkdir "working"
          mkdir ~/.aws
          cp "git-resource/config" "~/.aws/config"
          cp "git-resource/auth.py" "working/auth.py"
          cp "gen-aws-cred/cred.json" "working/cred.json"
          cp "git-resource/aws_key.py" "working/aws_key.py"
          cp "git-resource/lab_vars.py" "working/lab_vars.py"
          cd working
          python3 auth.py > out.csv
          sed '/^$/d' out.csv > out-cln.csv
          aws configure import --csv file://out-cln.csv
          export AWS_PAGER=""
          python3 aws_key.py
          cat *.pem
          cp "out.csv" "../aws-cred"
        path: /bin/sh
    task: gen-aws-ssh
- name: deploy-aws-env
  plan:
  - get: git-resource
  - config:
      image_resource:
        name: ""
        source:
          repository: sconrod/python-aws
          tag: v2
        type: docker-image
      inputs:
      - name: git-resource
      params:
        NAME: ((registry-username))
        PASSWORD: ((registry-password))
      platform: linux
      run:
        args:
        - -cx
        - |
          cd git-resource
          chmod a+x aws_key.sh
          ./aws_key.sh
          chmod a+x aws_deploy.sh
          ./aws_deploy.sh
        path: /bin/sh
    task: build-vpc
  public: true
- name: deploy-aws-csr1000v
  plan:
  - get: git-resource
  - config:
      image_resource:
        name: ""
        source:
          repository: sconrod/python-aws
          tag: v2
        type: docker-image
      inputs:
      - name: git-resource
      params:
        NAME: ((registry-username))
        PASSWORD: ((registry-password))
      platform: linux
      run:
        args:
        - -cx
        - |
          cd git-resource
          chmod a+x csr_deploy.sh
          ./csr_deploy.sh
        path: /bin/sh
    task: build-csr1000v
  public: true
- name: deploy-aws-ubuntu-router
  plan:
    - get: git-resource
    - config:
        image_resource:
          name: ""
          source:
            repository: sconrod/python-aws
            tag: v2
          type: docker-image
        inputs:
          - name: git-resource
        params:
          NAME: ((registry-username))
          PASSWORD: ((registry-password))
        platform: linux
        run:
          args:
            - -cx
            - |
              rm -rf __pycache__
              cd git-resource
              rm -rf __pycache__
              chmod a+x aws_ubuntu_router_deploy.sh
              ./aws_ubuntu_router_deploy.sh
          path: /bin/sh
      task: build-ubuntu-router
  public: true

- name: deploy-aws-ubuntu-lan
  plan:
    - get: git-resource
#     passed: [deploy-aws-env]
    - config:
        image_resource:
          name: ""
          source:
            repository: sconrod/python-aws
            tag: v2
          type: docker-image
        inputs:
          - name: git-resource
        params:
          NAME: ((registry-username))
          PASSWORD: ((registry-password))
        platform: linux
        run:
          args:
            - -cx
            - |
              rm -rf __pycache__
              cd git-resource
              rm -rf __pycache__
              chmod a+x aws_ubuntu_lan_deploy.sh
              ./aws_ubuntu_lan_deploy.sh
          path: /bin/sh
      task: build-ubuntu-lan
  public: true

- name: configure-cisco-csr1000v
  plan:
    - get: git-resource
     # passed: [deploy-aws-env]
    - config:
        image_resource:
          name: ""
          source:
            repository: sconrod/python-aws
            tag: v2
          type: docker-image
        inputs:
          - name: git-resource
        params:
          NAME: ((registry-username))
          PASSWORD: ((registry-password))
        platform: linux
        run:
          args:
            - -cx
            - |
              rm -rf __pycache__
              cd git-resource
              rm -rf __pycache__
              chmod a+x configure_csr.sh
              ./configure_csr.sh
          path: /bin/sh
      task: configure-csr
  public: true

- name: deploy-thousandeyes
  plan:
    - get: git-resource
      passed: [deploy-aws-env]
    - config:
        image_resource:
          name: ""
          source:
            repository: sconrod/python-aws
            tag: v2
          type: docker-image
        inputs:
          - name: git-resource
        params:
          NAME: ((registry-username))
          PASSWORD: ((registry-password))
        platform: linux
        run:
          args:
            - -cx
            - |
              cd git-resource
              chmod a+x deploy-thousandeyes.sh
              ./deploy-thousandeyes.sh
          path: /bin/sh
      task: deploy-thousandeyes
  public: true


- name: deploy-appdynamics
  plan:
    - get: git-resource
      passed: [deploy-aws-env]
    - config:
        image_resource:
          name: ""
          source:
            repository: sconrod/python-aws
            tag: v2
          type: docker-image
        inputs:
          - name: git-resource
        params:
          NAME: ((registry-username))
          PASSWORD: ((registry-password))
        platform: linux
        run:
          args:
            - -cx
            - |
              cd git-resource
              chmod a+x deploy-appdynamics.sh
              ./deploy-appdynamics.sh
          path: /bin/sh
      task: deploy-appdynamics
  public: true

- name: deploy-intersight
  plan:
    - get: git-resource
      passed: [deploy-aws-env]
    - config:
        image_resource:
          name: ""
          source:
            repository: sconrod/python-aws
            tag: v2
          type: docker-image
        inputs:
          - name: git-resource
        params:
          NAME: ((registry-username))
          PASSWORD: ((registry-password))
        platform: linux
        run:
          args:
            - -cx
            - |
              cd git-resource
              chmod a+x deploy-intersight.sh
              ./deploy-intersight.sh
          path: /bin/sh
      task: deploy-intersight
  public: true

resource_types:
- name: lpass-type
  source:
    repository: ansd/lastpass
    tag: 0.1.1
  type: docker-image
resources:
- name: git-resource
  source:
    Username: ((Username))
    branch: dev
    email: ((email))
    private_key: ((private_key))
    uri: ((git-uri))
  type: git
- name: lpass-res
  source:
    password: ((lpass-password))
    username: ((lpass-username))
  type: lpass-type
